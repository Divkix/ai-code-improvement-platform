// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Handle GitHub OAuth callback
	// (POST /api/auth/github/callback)
	GithubCallback(c *gin.Context)
	// Disconnect GitHub account
	// (POST /api/auth/github/disconnect)
	GithubDisconnect(c *gin.Context)
	// Get GitHub OAuth login URL
	// (GET /api/auth/github/login)
	GithubLogin(c *gin.Context, params GithubLoginParams)
	// Login user
	// (POST /api/auth/login)
	LoginUser(c *gin.Context)
	// Get current user
	// (GET /api/auth/me)
	GetCurrentUser(c *gin.Context)
	// Get recent activity
	// (GET /api/dashboard/activity)
	GetDashboardActivity(c *gin.Context, params GetDashboardActivityParams)
	// Get dashboard statistics
	// (GET /api/dashboard/stats)
	GetDashboardStats(c *gin.Context)
	// Get trend data
	// (GET /api/dashboard/trends)
	GetDashboardTrends(c *gin.Context, params GetDashboardTrendsParams)
	// Get user's GitHub repositories
	// (GET /api/github/repositories)
	GetGitHubRepositories(c *gin.Context, params GetGitHubRepositoriesParams)
	// Validate GitHub repository
	// (GET /api/github/repositories/{owner}/{repo}/validate)
	ValidateGitHubRepository(c *gin.Context, owner string, repo string)
	// API health check endpoint
	// (GET /api/health)
	GetApiHealth(c *gin.Context)
	// Get user's repositories
	// (GET /api/repositories)
	GetRepositories(c *gin.Context, params GetRepositoriesParams)
	// Create new repository
	// (POST /api/repositories)
	CreateRepository(c *gin.Context)
	// Delete repository
	// (DELETE /api/repositories/{id})
	DeleteRepository(c *gin.Context, id string)
	// Get repository by ID
	// (GET /api/repositories/{id})
	GetRepository(c *gin.Context, id string)
	// Update repository
	// (PUT /api/repositories/{id})
	UpdateRepository(c *gin.Context, id string)
	// Get repository statistics
	// (GET /api/repositories/{id}/stats)
	GetRepositoryStats(c *gin.Context, id string)
	// Health check endpoint
	// (GET /health)
	GetHealth(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GithubCallback operation middleware
func (siw *ServerInterfaceWrapper) GithubCallback(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GithubCallback(c)
}

// GithubDisconnect operation middleware
func (siw *ServerInterfaceWrapper) GithubDisconnect(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GithubDisconnect(c)
}

// GithubLogin operation middleware
func (siw *ServerInterfaceWrapper) GithubLogin(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GithubLoginParams

	// ------------- Optional query parameter "redirect_uri" -------------

	err = runtime.BindQueryParameter("form", true, false, "redirect_uri", c.Request.URL.Query(), &params.RedirectUri)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter redirect_uri: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GithubLogin(c, params)
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LoginUser(c)
}

// GetCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCurrentUser(c)
}

// GetDashboardActivity operation middleware
func (siw *ServerInterfaceWrapper) GetDashboardActivity(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDashboardActivityParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDashboardActivity(c, params)
}

// GetDashboardStats operation middleware
func (siw *ServerInterfaceWrapper) GetDashboardStats(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDashboardStats(c)
}

// GetDashboardTrends operation middleware
func (siw *ServerInterfaceWrapper) GetDashboardTrends(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDashboardTrendsParams

	// ------------- Optional query parameter "days" -------------

	err = runtime.BindQueryParameter("form", true, false, "days", c.Request.URL.Query(), &params.Days)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter days: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDashboardTrends(c, params)
}

// GetGitHubRepositories operation middleware
func (siw *ServerInterfaceWrapper) GetGitHubRepositories(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGitHubRepositoriesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGitHubRepositories(c, params)
}

// ValidateGitHubRepository operation middleware
func (siw *ServerInterfaceWrapper) ValidateGitHubRepository(c *gin.Context) {

	var err error

	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithOptions("simple", "owner", c.Param("owner"), &owner, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter owner: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "repo" -------------
	var repo string

	err = runtime.BindStyledParameterWithOptions("simple", "repo", c.Param("repo"), &repo, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter repo: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ValidateGitHubRepository(c, owner, repo)
}

// GetApiHealth operation middleware
func (siw *ServerInterfaceWrapper) GetApiHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiHealth(c)
}

// GetRepositories operation middleware
func (siw *ServerInterfaceWrapper) GetRepositories(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRepositoriesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRepositories(c, params)
}

// CreateRepository operation middleware
func (siw *ServerInterfaceWrapper) CreateRepository(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateRepository(c)
}

// DeleteRepository operation middleware
func (siw *ServerInterfaceWrapper) DeleteRepository(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRepository(c, id)
}

// GetRepository operation middleware
func (siw *ServerInterfaceWrapper) GetRepository(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRepository(c, id)
}

// UpdateRepository operation middleware
func (siw *ServerInterfaceWrapper) UpdateRepository(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateRepository(c, id)
}

// GetRepositoryStats operation middleware
func (siw *ServerInterfaceWrapper) GetRepositoryStats(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRepositoryStats(c, id)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealth(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/auth/github/callback", wrapper.GithubCallback)
	router.POST(options.BaseURL+"/api/auth/github/disconnect", wrapper.GithubDisconnect)
	router.GET(options.BaseURL+"/api/auth/github/login", wrapper.GithubLogin)
	router.POST(options.BaseURL+"/api/auth/login", wrapper.LoginUser)
	router.GET(options.BaseURL+"/api/auth/me", wrapper.GetCurrentUser)
	router.GET(options.BaseURL+"/api/dashboard/activity", wrapper.GetDashboardActivity)
	router.GET(options.BaseURL+"/api/dashboard/stats", wrapper.GetDashboardStats)
	router.GET(options.BaseURL+"/api/dashboard/trends", wrapper.GetDashboardTrends)
	router.GET(options.BaseURL+"/api/github/repositories", wrapper.GetGitHubRepositories)
	router.GET(options.BaseURL+"/api/github/repositories/:owner/:repo/validate", wrapper.ValidateGitHubRepository)
	router.GET(options.BaseURL+"/api/health", wrapper.GetApiHealth)
	router.GET(options.BaseURL+"/api/repositories", wrapper.GetRepositories)
	router.POST(options.BaseURL+"/api/repositories", wrapper.CreateRepository)
	router.DELETE(options.BaseURL+"/api/repositories/:id", wrapper.DeleteRepository)
	router.GET(options.BaseURL+"/api/repositories/:id", wrapper.GetRepository)
	router.PUT(options.BaseURL+"/api/repositories/:id", wrapper.UpdateRepository)
	router.GET(options.BaseURL+"/api/repositories/:id/stats", wrapper.GetRepositoryStats)
	router.GET(options.BaseURL+"/health", wrapper.GetHealth)
}
