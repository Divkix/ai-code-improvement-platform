// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ActivityItemSeverity.
const (
	ActivityItemSeverityError   ActivityItemSeverity = "error"
	ActivityItemSeverityInfo    ActivityItemSeverity = "info"
	ActivityItemSeveritySuccess ActivityItemSeverity = "success"
	ActivityItemSeverityWarning ActivityItemSeverity = "warning"
)

// Defines values for ActivityItemType.
const (
	AnalysisCompleted  ActivityItemType = "analysis_completed"
	IssueDetected      ActivityItemType = "issue_detected"
	OptimizationFound  ActivityItemType = "optimization_found"
	RepositoryImported ActivityItemType = "repository_imported"
)

// Defines values for EmbeddingStatusResponseStatus.
const (
	EmbeddingStatusResponseStatusCompleted  EmbeddingStatusResponseStatus = "completed"
	EmbeddingStatusResponseStatusFailed     EmbeddingStatusResponseStatus = "failed"
	EmbeddingStatusResponseStatusPending    EmbeddingStatusResponseStatus = "pending"
	EmbeddingStatusResponseStatusProcessing EmbeddingStatusResponseStatus = "processing"
)

// Defines values for HealthCheckServicesMongodb.
const (
	HealthCheckServicesMongodbConnected    HealthCheckServicesMongodb = "connected"
	HealthCheckServicesMongodbDisconnected HealthCheckServicesMongodb = "disconnected"
)

// Defines values for HealthCheckServicesQdrant.
const (
	HealthCheckServicesQdrantConnected    HealthCheckServicesQdrant = "connected"
	HealthCheckServicesQdrantDisconnected HealthCheckServicesQdrant = "disconnected"
)

// Defines values for HealthCheckStatus.
const (
	Degraded  HealthCheckStatus = "degraded"
	Healthy   HealthCheckStatus = "healthy"
	Unhealthy HealthCheckStatus = "unhealthy"
)

// Defines values for RepositoryStatus.
const (
	RepositoryStatusError     RepositoryStatus = "error"
	RepositoryStatusImporting RepositoryStatus = "importing"
	RepositoryStatusPending   RepositoryStatus = "pending"
	RepositoryStatusReady     RepositoryStatus = "ready"
)

// Defines values for SimilarityResultRelevance.
const (
	High   SimilarityResultRelevance = "high"
	Low    SimilarityResultRelevance = "low"
	Medium SimilarityResultRelevance = "medium"
)

// Defines values for GetRepositoriesParamsStatus.
const (
	GetRepositoriesParamsStatusError     GetRepositoriesParamsStatus = "error"
	GetRepositoriesParamsStatusImporting GetRepositoriesParamsStatus = "importing"
	GetRepositoriesParamsStatusPending   GetRepositoriesParamsStatus = "pending"
	GetRepositoriesParamsStatusReady     GetRepositoriesParamsStatus = "ready"
)

// ActivityItem defines model for ActivityItem.
type ActivityItem struct {
	Id             string               `json:"id"`
	Message        string               `json:"message"`
	RepositoryName *string              `json:"repositoryName,omitempty"`
	Severity       ActivityItemSeverity `json:"severity"`
	Timestamp      time.Time            `json:"timestamp"`
	Type           ActivityItemType     `json:"type"`
}

// ActivityItemSeverity defines model for ActivityItem.Severity.
type ActivityItemSeverity string

// ActivityItemType defines model for ActivityItem.Type.
type ActivityItemType string

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	Token string `json:"token"`
	User  User   `json:"user"`
}

// CodeChunk defines model for CodeChunk.
type CodeChunk struct {
	Content     string    `json:"content"`
	ContentHash *string   `json:"contentHash,omitempty"`
	CreatedAt   time.Time `json:"createdAt"`
	EndLine     int       `json:"endLine"`
	FileName    string    `json:"fileName"`
	FilePath    string    `json:"filePath"`
	Id          string    `json:"id"`
	Imports     *[]string `json:"imports,omitempty"`
	Language    string    `json:"language"`
	Metadata    *struct {
		Classes    *[]string `json:"classes,omitempty"`
		Complexity *int      `json:"complexity,omitempty"`
		Functions  *[]string `json:"functions,omitempty"`
		Types      *[]string `json:"types,omitempty"`
		Variables  *[]string `json:"variables,omitempty"`
	} `json:"metadata,omitempty"`
	RepositoryId string     `json:"repositoryId"`
	StartLine    int        `json:"startLine"`
	UpdatedAt    *time.Time `json:"updatedAt,omitempty"`
	VectorId     *string    `json:"vectorId,omitempty"`
}

// CreateRepositoryRequest defines model for CreateRepositoryRequest.
type CreateRepositoryRequest struct {
	Description     *string `json:"description,omitempty"`
	FullName        string  `json:"fullName"`
	GithubRepoId    *int64  `json:"githubRepoId,omitempty"`
	IsPrivate       *bool   `json:"isPrivate,omitempty"`
	Name            string  `json:"name"`
	Owner           string  `json:"owner"`
	PrimaryLanguage *string `json:"primaryLanguage,omitempty"`
}

// DashboardStats defines model for DashboardStats.
type DashboardStats struct {
	CodeChunksProcessed     int     `json:"codeChunksProcessed"`
	CostSavingsMonthly      float32 `json:"costSavingsMonthly"`
	DeveloperHoursReclaimed float32 `json:"developerHoursReclaimed"`
	IssuesPreventedMonthly  int     `json:"issuesPreventedMonthly"`
	KnowledgeRadius         int     `json:"knowledgeRadius"`
	TotalRepositories       int     `json:"totalRepositories"`
}

// EmbeddingStatusResponse defines model for EmbeddingStatusResponse.
type EmbeddingStatusResponse struct {
	// CompletedAt When processing completed
	CompletedAt *time.Time `json:"completedAt,omitempty"`

	// EstimatedTimeRemaining Estimated time remaining (duration, e.g., "1h2m3s")
	EstimatedTimeRemaining *string `json:"estimatedTimeRemaining,omitempty"`

	// FailedChunks Number of failed chunks
	FailedChunks *int `json:"failedChunks,omitempty"`

	// ProcessedChunks Number of processed chunks
	ProcessedChunks *int `json:"processedChunks,omitempty"`

	// Progress Processing progress percentage
	Progress int `json:"progress"`

	// RepositoryId ID of the repository
	RepositoryId string `json:"repositoryId"`

	// StartedAt When processing started
	StartedAt *time.Time `json:"startedAt,omitempty"`

	// Status Current embedding processing status
	Status EmbeddingStatusResponseStatus `json:"status"`

	// TotalChunks Total number of code chunks
	TotalChunks *int `json:"totalChunks,omitempty"`
}

// EmbeddingStatusResponseStatus Current embedding processing status
type EmbeddingStatusResponseStatus string

// Error defines model for Error.
type Error struct {
	Error   string `json:"error"`
	Message string `json:"message"`
}

// GitHubOAuthRequest defines model for GitHubOAuthRequest.
type GitHubOAuthRequest struct {
	// Code OAuth authorization code from GitHub
	Code string `json:"code"`

	// State OAuth state parameter for security
	State string `json:"state"`
}

// GitHubRepositoriesResponse defines model for GitHubRepositoriesResponse.
type GitHubRepositoriesResponse struct {
	// HasMore Whether there are more repositories to load
	HasMore      bool               `json:"hasMore"`
	Repositories []GitHubRepository `json:"repositories"`
}

// GitHubRepository defines model for GitHubRepository.
type GitHubRepository struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Description Repository description
	Description *string `json:"description,omitempty"`

	// ForksCount Number of forks
	ForksCount *int `json:"forksCount,omitempty"`

	// FullName Full repository name (owner/repo)
	FullName string `json:"fullName"`

	// Id GitHub repository ID
	Id int64 `json:"id"`

	// Language Primary programming language
	Language *string `json:"language,omitempty"`

	// Name Repository name
	Name string `json:"name"`

	// Owner Repository owner
	Owner string `json:"owner"`

	// Private Whether the repository is private
	Private  bool       `json:"private"`
	PushedAt *time.Time `json:"pushedAt,omitempty"`

	// Size Repository size in KB
	Size *int `json:"size,omitempty"`

	// StargazersCount Number of stars
	StargazersCount *int       `json:"stargazersCount,omitempty"`
	UpdatedAt       *time.Time `json:"updatedAt,omitempty"`
}

// HealthCheck defines model for HealthCheck.
type HealthCheck struct {
	Services struct {
		Mongodb *HealthCheckServicesMongodb `json:"mongodb,omitempty"`
		Qdrant  *HealthCheckServicesQdrant  `json:"qdrant,omitempty"`
	} `json:"services"`
	Status    HealthCheckStatus `json:"status"`
	Timestamp *time.Time        `json:"timestamp,omitempty"`
}

// HealthCheckServicesMongodb defines model for HealthCheck.Services.Mongodb.
type HealthCheckServicesMongodb string

// HealthCheckServicesQdrant defines model for HealthCheck.Services.Qdrant.
type HealthCheckServicesQdrant string

// HealthCheckStatus defines model for HealthCheck.Status.
type HealthCheckStatus string

// HybridSearchRequest defines model for HybridSearchRequest.
type HybridSearchRequest struct {
	// FileType Optional file extension filter
	FileType *string `json:"fileType,omitempty"`

	// Language Optional programming language filter
	Language *string `json:"language,omitempty"`

	// Limit Maximum number of results
	Limit *int `json:"limit,omitempty"`

	// Offset Pagination offset
	Offset *int `json:"offset,omitempty"`

	// Query Search query string for hybrid search
	Query string `json:"query"`

	// RepositoryId Optional repository ID filter
	RepositoryId *string `json:"repositoryId,omitempty"`

	// TextWeight Weight for text matching (0.0 to 1.0)
	TextWeight *float32 `json:"textWeight,omitempty"`

	// VectorWeight Weight for vector similarity (0.0 to 1.0)
	VectorWeight *float32 `json:"vectorWeight,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// PipelineStats defines model for PipelineStats.
type PipelineStats struct {
	Completed  int `json:"completed"`
	Failed     int `json:"failed"`
	Pending    int `json:"pending"`
	Processing int `json:"processing"`
}

// Repository defines model for Repository.
type Repository struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description *string   `json:"description,omitempty"`

	// FullName Repository full name in format owner/name
	FullName        string     `json:"fullName"`
	GithubRepoId    *int64     `json:"githubRepoId,omitempty"`
	Id              string     `json:"id"`
	ImportProgress  *int       `json:"importProgress,omitempty"`
	IndexedAt       *time.Time `json:"indexedAt,omitempty"`
	IsPrivate       *bool      `json:"isPrivate,omitempty"`
	LastSyncedAt    *time.Time `json:"lastSyncedAt,omitempty"`
	Name            string     `json:"name"`
	Owner           string     `json:"owner"`
	PrimaryLanguage *string    `json:"primaryLanguage,omitempty"`
	Stats           *struct {
		Languages      *map[string]int `json:"languages,omitempty"`
		LastCommitDate *time.Time      `json:"lastCommitDate,omitempty"`
		TotalFiles     *int            `json:"totalFiles,omitempty"`
		TotalLines     *int            `json:"totalLines,omitempty"`
	} `json:"stats,omitempty"`
	Status    RepositoryStatus `json:"status"`
	UpdatedAt time.Time        `json:"updatedAt"`
	UserId    string           `json:"userId"`
}

// RepositoryStatus defines model for Repository.Status.
type RepositoryStatus string

// RepositoryListResponse defines model for RepositoryListResponse.
type RepositoryListResponse struct {
	Repositories []Repository `json:"repositories"`
	Total        int          `json:"total"`
}

// SearchRequest defines model for SearchRequest.
type SearchRequest struct {
	// FileType Optional file extension filter
	FileType *string `json:"fileType,omitempty"`

	// Language Optional programming language filter
	Language *string `json:"language,omitempty"`

	// Limit Maximum number of results
	Limit *int `json:"limit,omitempty"`

	// Offset Pagination offset
	Offset *int `json:"offset,omitempty"`

	// Query Search query string
	Query string `json:"query"`

	// RepositoryId Optional repository ID filter
	RepositoryId *string `json:"repositoryId,omitempty"`
}

// SearchResponse defines model for SearchResponse.
type SearchResponse struct {
	// HasMore Whether there are more results available
	HasMore bool `json:"hasMore"`

	// Query The original search query
	Query   string         `json:"query"`
	Results []SearchResult `json:"results"`

	// Total Total number of matching results
	Total int `json:"total"`
}

// SearchResult defines model for SearchResult.
type SearchResult struct {
	Content     string    `json:"content"`
	ContentHash *string   `json:"contentHash,omitempty"`
	CreatedAt   time.Time `json:"createdAt"`
	EndLine     int       `json:"endLine"`
	FileName    string    `json:"fileName"`
	FilePath    string    `json:"filePath"`

	// Highlight Highlighted content snippet
	Highlight *string   `json:"highlight,omitempty"`
	Id        string    `json:"id"`
	Imports   *[]string `json:"imports,omitempty"`
	Language  string    `json:"language"`
	Metadata  *struct {
		Classes    *[]string `json:"classes,omitempty"`
		Complexity *int      `json:"complexity,omitempty"`
		Functions  *[]string `json:"functions,omitempty"`
		Types      *[]string `json:"types,omitempty"`
		Variables  *[]string `json:"variables,omitempty"`
	} `json:"metadata,omitempty"`
	RepositoryId string `json:"repositoryId"`

	// Score Relevance score
	Score     *float32   `json:"score,omitempty"`
	StartLine int        `json:"startLine"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	VectorId  *string    `json:"vectorId,omitempty"`
}

// SearchStats defines model for SearchStats.
type SearchStats struct {
	AvgComplexity float32  `json:"avgComplexity"`
	Languages     []string `json:"languages"`
	TotalChunks   int      `json:"totalChunks"`
	TotalLines    int      `json:"totalLines"`
}

// SimilarityResult defines model for SimilarityResult.
type SimilarityResult struct {
	Content     string    `json:"content"`
	ContentHash *string   `json:"contentHash,omitempty"`
	CreatedAt   time.Time `json:"createdAt"`

	// Distance Cosine distance (1.0 - score)
	Distance *float32  `json:"distance,omitempty"`
	EndLine  int       `json:"endLine"`
	FileName string    `json:"fileName"`
	FilePath string    `json:"filePath"`
	Id       string    `json:"id"`
	Imports  *[]string `json:"imports,omitempty"`
	Language string    `json:"language"`
	Metadata *struct {
		Classes    *[]string `json:"classes,omitempty"`
		Complexity *int      `json:"complexity,omitempty"`
		Functions  *[]string `json:"functions,omitempty"`
		Types      *[]string `json:"types,omitempty"`
		Variables  *[]string `json:"variables,omitempty"`
	} `json:"metadata,omitempty"`

	// Relevance Relevance level based on similarity score
	Relevance    *SimilarityResultRelevance `json:"relevance,omitempty"`
	RepositoryId string                     `json:"repositoryId"`

	// Score Cosine similarity score
	Score     *float32   `json:"score,omitempty"`
	StartLine int        `json:"startLine"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	VectorId  *string    `json:"vectorId,omitempty"`
}

// SimilarityResultRelevance Relevance level based on similarity score
type SimilarityResultRelevance string

// TrendDataPoint defines model for TrendDataPoint.
type TrendDataPoint struct {
	CodeQuality      float32            `json:"codeQuality"`
	Date             openapi_types.Date `json:"date"`
	IssuesResolved   int                `json:"issuesResolved"`
	PerformanceScore float32            `json:"performanceScore"`
}

// UpdateRepositoryRequest defines model for UpdateRepositoryRequest.
type UpdateRepositoryRequest struct {
	Description     *string `json:"description,omitempty"`
	Name            *string `json:"name,omitempty"`
	PrimaryLanguage *string `json:"primaryLanguage,omitempty"`
}

// User defines model for User.
type User struct {
	CreatedAt time.Time           `json:"createdAt"`
	Email     openapi_types.Email `json:"email"`

	// GithubConnected Whether the user has connected their GitHub account
	GithubConnected *bool `json:"githubConnected,omitempty"`

	// GithubUsername GitHub username if connected
	GithubUsername *string `json:"githubUsername,omitempty"`
	Id             string  `json:"id"`
	Name           string  `json:"name"`
}

// VectorSearchRequest defines model for VectorSearchRequest.
type VectorSearchRequest struct {
	// FileType Optional file extension filter
	FileType *string `json:"fileType,omitempty"`

	// Language Optional programming language filter
	Language *string `json:"language,omitempty"`

	// Limit Maximum number of results
	Limit *int `json:"limit,omitempty"`

	// Offset Pagination offset
	Offset *int `json:"offset,omitempty"`

	// Query Search query string for semantic similarity
	Query string `json:"query"`

	// RepositoryId Optional repository ID filter
	RepositoryId *string `json:"repositoryId,omitempty"`
}

// GithubLoginParams defines parameters for GithubLogin.
type GithubLoginParams struct {
	// RedirectUri Redirect URI after OAuth completion
	RedirectUri *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty"`
}

// GetDashboardActivityParams defines parameters for GetDashboardActivity.
type GetDashboardActivityParams struct {
	// Limit Maximum number of activity items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetDashboardTrendsParams defines parameters for GetDashboardTrends.
type GetDashboardTrendsParams struct {
	// Days Number of days of trend data to return
	Days *int `form:"days,omitempty" json:"days,omitempty"`
}

// GetGitHubRepositoriesParams defines parameters for GetGitHubRepositories.
type GetGitHubRepositoriesParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`
}

// GetRepositoriesParams defines parameters for GetRepositories.
type GetRepositoriesParams struct {
	// Limit Maximum number of repositories to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of repositories to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Status Filter by repository status
	Status *GetRepositoriesParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// GetRepositoriesParamsStatus defines parameters for GetRepositories.
type GetRepositoriesParamsStatus string

// RepositorySearchParams defines parameters for RepositorySearch.
type RepositorySearchParams struct {
	// Limit Maximum number of results to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of results to skip for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Language Filter by programming language
	Language *string `form:"language,omitempty" json:"language,omitempty"`

	// FileType Filter by file extension
	FileType *string `form:"fileType,omitempty" json:"fileType,omitempty"`
}

// GlobalSearchParams defines parameters for GlobalSearch.
type GlobalSearchParams struct {
	// Limit Maximum number of results to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of results to skip for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Language Filter by programming language
	Language *string `form:"language,omitempty" json:"language,omitempty"`

	// FileType Filter by file extension
	FileType *string `form:"fileType,omitempty" json:"fileType,omitempty"`
}

// GetLanguagesParams defines parameters for GetLanguages.
type GetLanguagesParams struct {
	// RepositoryId Filter by repository ID
	RepositoryId *string `form:"repositoryId,omitempty" json:"repositoryId,omitempty"`
}

// QuickSearchParams defines parameters for QuickSearch.
type QuickSearchParams struct {
	// Q Search query
	Q string `form:"q" json:"q"`

	// RepositoryId Filter by repository ID
	RepositoryId *string `form:"repositoryId,omitempty" json:"repositoryId,omitempty"`

	// Language Filter by programming language
	Language *string `form:"language,omitempty" json:"language,omitempty"`

	// FileType Filter by file extension
	FileType *string `form:"fileType,omitempty" json:"fileType,omitempty"`
}

// GetRecentChunksParams defines parameters for GetRecentChunks.
type GetRecentChunksParams struct {
	// RepositoryId Filter by repository ID
	RepositoryId *string `form:"repositoryId,omitempty" json:"repositoryId,omitempty"`

	// Limit Maximum number of chunks to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// FindSimilarChunksParams defines parameters for FindSimilarChunks.
type FindSimilarChunksParams struct {
	// Limit Maximum number of similar chunks to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// RepositoryId Optional repository ID filter
	RepositoryId *string `form:"repositoryId,omitempty" json:"repositoryId,omitempty"`
}

// GetSearchStatsParams defines parameters for GetSearchStats.
type GetSearchStatsParams struct {
	// RepositoryId Filter by repository ID
	RepositoryId *string `form:"repositoryId,omitempty" json:"repositoryId,omitempty"`
}

// GetSearchSuggestionsParams defines parameters for GetSearchSuggestions.
type GetSearchSuggestionsParams struct {
	// Q Partial search query
	Q string `form:"q" json:"q"`

	// RepositoryId Filter by repository ID
	RepositoryId *string `form:"repositoryId,omitempty" json:"repositoryId,omitempty"`
}

// GithubCallbackJSONRequestBody defines body for GithubCallback for application/json ContentType.
type GithubCallbackJSONRequestBody = GitHubOAuthRequest

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginRequest

// CreateRepositoryJSONRequestBody defines body for CreateRepository for application/json ContentType.
type CreateRepositoryJSONRequestBody = CreateRepositoryRequest

// UpdateRepositoryJSONRequestBody defines body for UpdateRepository for application/json ContentType.
type UpdateRepositoryJSONRequestBody = UpdateRepositoryRequest

// RepositorySearchJSONRequestBody defines body for RepositorySearch for application/json ContentType.
type RepositorySearchJSONRequestBody = SearchRequest

// GlobalSearchJSONRequestBody defines body for GlobalSearch for application/json ContentType.
type GlobalSearchJSONRequestBody = SearchRequest

// HybridSearchJSONRequestBody defines body for HybridSearch for application/json ContentType.
type HybridSearchJSONRequestBody = HybridSearchRequest

// VectorSearchJSONRequestBody defines body for VectorSearch for application/json ContentType.
type VectorSearchJSONRequestBody = VectorSearchRequest
