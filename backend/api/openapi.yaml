openapi: 3.1.0
info:
  title: GitHub Repository Analyzer API
  description: AI-powered code analysis platform for GitHub repositories
  version: 1.0.0
  contact:
    name: API Support
    email: support@github-analyzer.com

servers:
  - url: http://localhost:8080
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
        message:
          type: string

    User:
      type: object
      required:
        - id
        - email
        - name
        - createdAt
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        githubConnected:
          type: boolean
          description: Whether the user has connected their GitHub account
        githubUsername:
          type: string
          description: GitHub username if connected
        createdAt:
          type: string
          format: date-time

    GitHubOAuthRequest:
      type: object
      required:
        - code
        - state
      properties:
        code:
          type: string
          description: OAuth authorization code from GitHub
        state:
          type: string
          description: OAuth state parameter for security

    GitHubRepository:
      type: object
      required:
        - id
        - name
        - fullName
        - owner
        - private
      properties:
        id:
          type: integer
          format: int64
          description: GitHub repository ID
        name:
          type: string
          description: Repository name
        fullName:
          type: string
          description: Full repository name (owner/repo)
        owner:
          type: string
          description: Repository owner
        description:
          type: string
          description: Repository description
        private:
          type: boolean
          description: Whether the repository is private
        language:
          type: string
          description: Primary programming language
        stargazersCount:
          type: integer
          description: Number of stars
        forksCount:
          type: integer
          description: Number of forks
        size:
          type: integer
          description: Repository size in KB
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        pushedAt:
          type: string
          format: date-time

    GitHubRepositoriesResponse:
      type: object
      required:
        - repositories
        - hasMore
      properties:
        repositories:
          type: array
          items:
            $ref: '#/components/schemas/GitHubRepository'
        hasMore:
          type: boolean
          description: Whether there are more repositories to load


    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    AuthResponse:
      type: object
      required:
        - token
        - user
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'

    HealthCheck:
      type: object
      required:
        - status
        - services
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        services:
          type: object
          properties:
            mongodb:
              type: string
              enum: [connected, disconnected]
            qdrant:
              type: string
              enum: [connected, disconnected]
        timestamp:
          type: string
          format: date-time

    DashboardStats:
      type: object
      required:
        - totalRepositories
        - codeChunksProcessed
        - avgResponseTime
        - costSavingsMonthly
        - issuesPreventedMonthly
        - developerHoursReclaimed
      properties:
        totalRepositories:
          type: integer
          minimum: 0
        codeChunksProcessed:
          type: integer
          minimum: 0
        avgResponseTime:
          type: number
          format: float
          minimum: 0
        costSavingsMonthly:
          type: number
          format: float
          minimum: 0
        issuesPreventedMonthly:
          type: integer
          minimum: 0
        developerHoursReclaimed:
          type: number
          format: float
          minimum: 0

    ActivityItem:
      type: object
      required:
        - id
        - type
        - message
        - timestamp
        - severity
      properties:
        id:
          type: string
        type:
          type: string
          enum: [repository_imported, analysis_completed, issue_detected, optimization_found]
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        severity:
          type: string
          enum: [info, warning, error, success]
        repositoryName:
          type: string

    TrendDataPoint:
      type: object
      required:
        - date
        - codeQuality
        - issuesResolved
        - performanceScore
      properties:
        date:
          type: string
          format: date
        codeQuality:
          type: number
          format: float
          minimum: 0
          maximum: 100
        issuesResolved:
          type: integer
          minimum: 0
        performanceScore:
          type: number
          format: float
          minimum: 0
          maximum: 100

    Repository:
      type: object
      required:
        - id
        - userId
        - owner
        - name
        - fullName
        - status
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
        userId:
          type: string
        githubRepoId:
          type: integer
          format: int64
        owner:
          type: string
        name:
          type: string
        fullName:
          type: string
          description: "Repository full name in format owner/name"
        description:
          type: string
        primaryLanguage:
          type: string
        isPrivate:
          type: boolean
        indexedAt:
          type: string
          format: date-time
        lastSyncedAt:
          type: string
          format: date-time
        status:
          type: string
          enum: [pending, importing, ready, error]
        importProgress:
          type: integer
          minimum: 0
          maximum: 100
        stats:
          type: object
          properties:
            totalFiles:
              type: integer
              minimum: 0
            totalLines:
              type: integer
              minimum: 0
            languages:
              type: object
              additionalProperties:
                type: integer
            lastCommitDate:
              type: string
              format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateRepositoryRequest:
      type: object
      required:
        - name
        - owner
        - fullName
      properties:
        name:
          type: string
        owner:
          type: string
        fullName:
          type: string
        description:
          type: string
        githubRepoId:
          type: integer
          format: int64
        primaryLanguage:
          type: string
        isPrivate:
          type: boolean

    UpdateRepositoryRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        primaryLanguage:
          type: string

    RepositoryListResponse:
      type: object
      required:
        - repositories
        - total
      properties:
        repositories:
          type: array
          items:
            $ref: '#/components/schemas/Repository'
        total:
          type: integer
          minimum: 0

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Check the health of all services
      operationId: getHealth
      responses:
        '200':
          description: Service health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/health:
    get:
      summary: API health check endpoint
      description: Check the health of API and dependencies
      operationId: getApiHealth
      responses:
        '200':
          description: API health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      summary: Login user
      description: Authenticate user and return JWT token
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/me:
    get:
      summary: Get current user
      description: Get current user information from JWT token
      operationId: getCurrentUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/github/login:
    get:
      summary: Get GitHub OAuth login URL
      description: Redirect to GitHub OAuth authorization
      operationId: githubLogin
      security:
        - BearerAuth: []
      parameters:
        - name: redirect_uri
          in: query
          description: Redirect URI after OAuth completion
          schema:
            type: string
            default: "http://localhost:3000/auth/github/callback"
      responses:
        '302':
          description: Redirect to GitHub OAuth
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/github/callback:
    post:
      summary: Handle GitHub OAuth callback
      description: Process GitHub OAuth callback and exchange code for token
      operationId: githubCallback
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GitHubOAuthRequest'
      responses:
        '200':
          description: OAuth successful, user GitHub account connected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid OAuth request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/github/disconnect:
    post:
      summary: Disconnect GitHub account
      description: Remove GitHub OAuth connection from user account
      operationId: githubDisconnect
      security:
        - BearerAuth: []
      responses:
        '200':
          description: GitHub account disconnected successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/github/repositories:
    get:
      summary: Get user's GitHub repositories
      description: Fetch repositories from the authenticated user's GitHub account
      operationId: getGitHubRepositories
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: List of GitHub repositories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitHubRepositoriesResponse'
        '401':
          description: Unauthorized or GitHub not connected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: GitHub rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/github/repositories/{owner}/{repo}/validate:
    get:
      summary: Validate GitHub repository
      description: Validate that a GitHub repository exists and is accessible
      operationId: validateGitHubRepository
      security:
        - BearerAuth: []
      parameters:
        - name: owner
          in: path
          required: true
          description: Repository owner
          schema:
            type: string
        - name: repo
          in: path
          required: true
          description: Repository name
          schema:
            type: string
      responses:
        '200':
          description: Repository is valid and accessible
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitHubRepository'
        '401':
          description: Unauthorized or GitHub not connected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Repository not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: GitHub rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/dashboard/stats:
    get:
      summary: Get dashboard statistics
      description: Retrieve key metrics and statistics for the dashboard
      operationId: getDashboardStats
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Dashboard statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStats'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/dashboard/activity:
    get:
      summary: Get recent activity
      description: Retrieve recent activity items for the dashboard
      operationId: getDashboardActivity
      security:
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of activity items to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: Recent activity items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityItem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/dashboard/trends:
    get:
      summary: Get trend data
      description: Retrieve trend data for charts and analytics
      operationId: getDashboardTrends
      security:
        - BearerAuth: []
      parameters:
        - name: days
          in: query
          description: Number of days of trend data to return
          schema:
            type: integer
            minimum: 7
            maximum: 90
            default: 30
      responses:
        '200':
          description: Trend data points
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrendDataPoint'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/repositories:
    get:
      summary: Get user's repositories
      description: Retrieve a list of repositories owned by the current user
      operationId: getRepositories
      security:
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of repositories to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of repositories to skip
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: status
          in: query
          description: Filter by repository status
          schema:
            type: string
            enum: [pending, importing, ready, error]
      responses:
        '200':
          description: List of user repositories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create new repository
      description: Add a new repository for analysis
      operationId: createRepository
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRepositoryRequest'
      responses:
        '201':
          description: Repository created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Repository already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/repositories/{id}:
    get:
      summary: Get repository by ID
      description: Retrieve detailed information about a specific repository
      operationId: getRepository
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Repository ID
          schema:
            type: string
      responses:
        '200':
          description: Repository details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Repository not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update repository
      description: Update repository information
      operationId: updateRepository
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Repository ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRepositoryRequest'
      responses:
        '200':
          description: Repository updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Repository not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete repository
      description: Remove repository from analysis
      operationId: deleteRepository
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Repository ID
          schema:
            type: string
      responses:
        '204':
          description: Repository deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Repository not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/repositories/{id}/stats:
    get:
      summary: Get repository statistics
      description: Retrieve detailed statistics for a repository
      operationId: getRepositoryStats
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Repository ID
          schema:
            type: string
      responses:
        '200':
          description: Repository statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  repositoryId:
                    type: string
                  totalFiles:
                    type: integer
                  totalLines:
                    type: integer
                  languages:
                    type: object
                    additionalProperties:
                      type: integer
                  lastCommitDate:
                    type: string
                    format: date-time
                  codeChunks:
                    type: integer
                  avgComplexity:
                    type: number
                    format: float
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Repository not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'