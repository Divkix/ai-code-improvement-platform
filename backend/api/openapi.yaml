openapi: 3.0.0
info:
  title: GitHub Repository Analyzer API
  description: AI-powered code analysis platform for GitHub repositories
  version: 1.0.0
  contact:
    name: API Support
    email: support@github-analyzer.com

servers:
  - url: http://localhost:8080
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
        message:
          type: string

    User:
      type: object
      required:
        - id
        - email
        - name
        - createdAt
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        githubConnected:
          type: boolean
          description: Whether the user has connected their GitHub account
        githubUsername:
          type: string
          description: GitHub username if connected
        createdAt:
          type: string
          format: date-time

    GitHubOAuthRequest:
      type: object
      required:
        - code
        - state
      properties:
        code:
          type: string
          description: OAuth authorization code from GitHub
        state:
          type: string
          description: OAuth state parameter for security

    GitHubRepository:
      type: object
      required:
        - id
        - name
        - fullName
        - owner
        - private
      properties:
        id:
          type: integer
          format: int64
          description: GitHub repository ID
        name:
          type: string
          description: Repository name
        fullName:
          type: string
          description: Full repository name (owner/repo)
        owner:
          type: string
          description: Repository owner
        description:
          type: string
          description: Repository description
        private:
          type: boolean
          description: Whether the repository is private
        language:
          type: string
          description: Primary programming language
        stargazersCount:
          type: integer
          description: Number of stars
        forksCount:
          type: integer
          description: Number of forks
        size:
          type: integer
          description: Repository size in KB
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        pushedAt:
          type: string
          format: date-time

    GitHubRepositoriesResponse:
      type: object
      required:
        - repositories
        - hasMore
      properties:
        repositories:
          type: array
          items:
            $ref: "#/components/schemas/GitHubRepository"
        hasMore:
          type: boolean
          description: Whether there are more repositories to load

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    AuthResponse:
      type: object
      required:
        - token
        - user
      properties:
        token:
          type: string
        user:
          $ref: "#/components/schemas/User"

    HealthCheck:
      type: object
      required:
        - status
        - services
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        services:
          type: object
          properties:
            mongodb:
              type: string
              enum: [connected, disconnected]
            qdrant:
              type: string
              enum: [connected, disconnected]
        timestamp:
          type: string
          format: date-time

    DashboardStats:
      type: object
      required:
        - totalRepositories
        - codeChunksProcessed
        - avgResponseTime
        - costSavingsMonthly
        - issuesPreventedMonthly
        - developerHoursReclaimed
      properties:
        totalRepositories:
          type: integer
          minimum: 0
        codeChunksProcessed:
          type: integer
          minimum: 0
        avgResponseTime:
          type: number
          format: float
          minimum: 0
        costSavingsMonthly:
          type: number
          format: float
          minimum: 0
        issuesPreventedMonthly:
          type: integer
          minimum: 0
        developerHoursReclaimed:
          type: number
          format: float
          minimum: 0

    ActivityItem:
      type: object
      required:
        - id
        - type
        - message
        - timestamp
        - severity
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            [
              repository_imported,
              analysis_completed,
              issue_detected,
              optimization_found,
            ]
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        severity:
          type: string
          enum: [info, warning, error, success]
        repositoryName:
          type: string

    TrendDataPoint:
      type: object
      required:
        - date
        - codeQuality
        - issuesResolved
        - performanceScore
      properties:
        date:
          type: string
          format: date
        codeQuality:
          type: number
          format: float
          minimum: 0
          maximum: 100
        issuesResolved:
          type: integer
          minimum: 0
        performanceScore:
          type: number
          format: float
          minimum: 0
          maximum: 100

    Repository:
      type: object
      required:
        - id
        - userId
        - owner
        - name
        - fullName
        - status
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
        userId:
          type: string
        githubRepoId:
          type: integer
          format: int64
        owner:
          type: string
        name:
          type: string
        fullName:
          type: string
          description: "Repository full name in format owner/name"
        description:
          type: string
        primaryLanguage:
          type: string
        isPrivate:
          type: boolean
        indexedAt:
          type: string
          format: date-time
        lastSyncedAt:
          type: string
          format: date-time
        status:
          type: string
          enum: [pending, importing, ready, error]
        importProgress:
          type: integer
          minimum: 0
          maximum: 100
        stats:
          type: object
          properties:
            totalFiles:
              type: integer
              minimum: 0
            totalLines:
              type: integer
              minimum: 0
            languages:
              type: object
              additionalProperties:
                type: integer
            lastCommitDate:
              type: string
              format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateRepositoryRequest:
      type: object
      required:
        - name
        - owner
        - fullName
      properties:
        name:
          type: string
        owner:
          type: string
        fullName:
          type: string
        description:
          type: string
        githubRepoId:
          type: integer
          format: int64
        primaryLanguage:
          type: string
        isPrivate:
          type: boolean

    UpdateRepositoryRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        primaryLanguage:
          type: string

    RepositoryListResponse:
      type: object
      required:
        - repositories
        - total
      properties:
        repositories:
          type: array
          items:
            $ref: "#/components/schemas/Repository"
        total:
          type: integer
          minimum: 0

    CodeChunk:
      type: object
      required:
        - id
        - repositoryId
        - filePath
        - fileName
        - language
        - startLine
        - endLine
        - content
        - createdAt
      properties:
        id:
          type: string
        repositoryId:
          type: string
        filePath:
          type: string
        fileName:
          type: string
        language:
          type: string
        startLine:
          type: integer
          minimum: 1
        endLine:
          type: integer
          minimum: 1
        content:
          type: string
        contentHash:
          type: string
        imports:
          type: array
          items:
            type: string
        metadata:
          type: object
          properties:
            functions:
              type: array
              items:
                type: string
            classes:
              type: array
              items:
                type: string
            variables:
              type: array
              items:
                type: string
            types:
              type: array
              items:
                type: string
            complexity:
              type: integer
              minimum: 0
        vectorId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    SearchRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          minLength: 1
          maxLength: 500
          description: Search query string
        repositoryId:
          type: string
          description: Optional repository ID filter
        language:
          type: string
          description: Optional programming language filter
        fileType:
          type: string
          description: Optional file extension filter
        limit:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
          description: Maximum number of results
        offset:
          type: integer
          minimum: 0
          default: 0
          description: Pagination offset

    SearchResult:
      allOf:
        - $ref: "#/components/schemas/CodeChunk"
        - type: object
          properties:
            score:
              type: number
              format: float
              description: Relevance score
            highlight:
              type: string
              description: Highlighted content snippet

    SearchResponse:
      type: object
      required:
        - results
        - total
        - hasMore
        - query
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/SearchResult"
        total:
          type: integer
          minimum: 0
          description: Total number of matching results
        hasMore:
          type: boolean
          description: Whether there are more results available
        query:
          type: string
          description: The original search query

    SearchStats:
      type: object
      required:
        - totalChunks
        - totalLines
        - avgComplexity
        - languages
      properties:
        totalChunks:
          type: integer
          minimum: 0
        totalLines:
          type: integer
          minimum: 0
        avgComplexity:
          type: number
          format: float
        languages:
          type: array
          items:
            type: string

    VectorSearchRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          minLength: 1
          maxLength: 500
          description: Search query string for semantic similarity
        repositoryId:
          type: string
          description: Optional repository ID filter
        language:
          type: string
          description: Optional programming language filter
        fileType:
          type: string
          description: Optional file extension filter
        limit:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
          description: Maximum number of results
        offset:
          type: integer
          minimum: 0
          default: 0
          description: Pagination offset

    HybridSearchRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          minLength: 1
          maxLength: 500
          description: Search query string for hybrid search
        repositoryId:
          type: string
          description: Optional repository ID filter
        language:
          type: string
          description: Optional programming language filter
        fileType:
          type: string
          description: Optional file extension filter
        vectorWeight:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          default: 0.7
          description: Weight for vector similarity (0.0 to 1.0)
        textWeight:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          default: 0.3
          description: Weight for text matching (0.0 to 1.0)
        limit:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
          description: Maximum number of results
        offset:
          type: integer
          minimum: 0
          default: 0
          description: Pagination offset

    SimilarityResult:
      allOf:
        - $ref: "#/components/schemas/CodeChunk"
        - type: object
          properties:
            score:
              type: number
              format: float
              minimum: 0.0
              maximum: 1.0
              description: Cosine similarity score
            distance:
              type: number
              format: float
              minimum: 0.0
              maximum: 1.0
              description: Cosine distance (1.0 - score)
            relevance:
              type: string
              enum: [high, medium, low]
              description: Relevance level based on similarity score

    EmbeddingStatusResponse:
      type: object
      required:
        - repositoryId
        - status
        - progress
      properties:
        repositoryId:
          type: string
          description: ID of the repository
        status:
          type: string
          enum: [pending, processing, completed, failed]
          description: Current embedding processing status
        progress:
          type: integer
          minimum: 0
          maximum: 100
          description: Processing progress percentage
        totalChunks:
          type: integer
          minimum: 0
          description: Total number of code chunks
        processedChunks:
          type: integer
          minimum: 0
          description: Number of processed chunks
        failedChunks:
          type: integer
          minimum: 0
          description: Number of failed chunks
        startedAt:
          type: string
          format: date-time
          description: When processing started
        completedAt:
          type: string
          format: date-time
          description: When processing completed
        estimatedTimeRemaining:
          type: string
          description: Estimated time remaining (duration, e.g., "1h2m3s")

    PipelineStats:
      type: object
      required:
        - pending
        - processing
        - completed
        - failed
      properties:
        pending:
          type: integer
          minimum: 0
        processing:
          type: integer
          minimum: 0
        completed:
          type: integer
          minimum: 0
        failed:
          type: integer
          minimum: 0

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Check the health of all services
      operationId: getHealth
      responses:
        "200":
          description: Service health status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheck"
        "503":
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/health:
    get:
      summary: API health check endpoint
      description: Check the health of API and dependencies
      operationId: getApiHealth
      responses:
        "200":
          description: API health status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheck"
        "503":
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/auth/login:
    post:
      summary: Login user
      description: Authenticate user and return JWT token
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: User authenticated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/auth/me:
    get:
      summary: Get current user
      description: Get current user information from JWT token
      operationId: getCurrentUser
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Current user information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/auth/github/login:
    get:
      summary: Get GitHub OAuth login URL
      description: Redirect to GitHub OAuth authorization
      operationId: githubLogin
      security:
        - BearerAuth: []
      parameters:
        - name: redirect_uri
          in: query
          description: Redirect URI after OAuth completion
          schema:
            type: string
            default: "http://localhost:3000/auth/github/callback"
      responses:
        "200":
          description: GitHub OAuth login URL and state
          content:
            application/json:
              schema:
                type: object
                required:
                  - auth_url
                  - state
                properties:
                  auth_url:
                    type: string
                    description: GitHub OAuth authorization URL
                  state:
                    type: string
                    description: OAuth state parameter for CSRF protection
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/auth/github/callback:
    post:
      summary: Handle GitHub OAuth callback
      description: Process GitHub OAuth callback and exchange code for token
      operationId: githubCallback
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GitHubOAuthRequest"
      responses:
        "200":
          description: OAuth successful, user GitHub account connected
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid OAuth request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/auth/github/disconnect:
    post:
      summary: Disconnect GitHub account
      description: Remove GitHub OAuth connection from user account
      operationId: githubDisconnect
      security:
        - BearerAuth: []
      responses:
        "200":
          description: GitHub account disconnected successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/github/repositories:
    get:
      summary: Get user's GitHub repositories
      description: Fetch repositories from the authenticated user's GitHub account
      operationId: getGitHubRepositories
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        "200":
          description: List of GitHub repositories
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GitHubRepositoriesResponse"
        "401":
          description: Unauthorized or GitHub not connected
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "429":
          description: GitHub rate limit exceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/github/repositories/{owner}/{repo}/validate:
    get:
      summary: Validate GitHub repository
      description: Validate that a GitHub repository exists and is accessible
      operationId: validateGitHubRepository
      security:
        - BearerAuth: []
      parameters:
        - name: owner
          in: path
          required: true
          description: Repository owner
          schema:
            type: string
        - name: repo
          in: path
          required: true
          description: Repository name
          schema:
            type: string
      responses:
        "200":
          description: Repository is valid and accessible
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GitHubRepository"
        "401":
          description: Unauthorized or GitHub not connected
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Repository not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "429":
          description: GitHub rate limit exceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/dashboard/stats:
    get:
      summary: Get dashboard statistics
      description: Retrieve key metrics and statistics for the dashboard
      operationId: getDashboardStats
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Dashboard statistics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardStats"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/dashboard/activity:
    get:
      summary: Get recent activity
      description: Retrieve recent activity items for the dashboard
      operationId: getDashboardActivity
      security:
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of activity items to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        "200":
          description: Recent activity items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ActivityItem"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/dashboard/trends:
    get:
      summary: Get trend data
      description: Retrieve trend data for charts and analytics
      operationId: getDashboardTrends
      security:
        - BearerAuth: []
      parameters:
        - name: days
          in: query
          description: Number of days of trend data to return
          schema:
            type: integer
            minimum: 7
            maximum: 90
            default: 30
      responses:
        "200":
          description: Trend data points
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TrendDataPoint"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/repositories:
    get:
      summary: Get user's repositories
      description: Retrieve a list of repositories owned by the current user
      operationId: getRepositories
      security:
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of repositories to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of repositories to skip
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: status
          in: query
          description: Filter by repository status
          schema:
            type: string
            enum: [pending, importing, ready, error]
      responses:
        "200":
          description: List of user repositories
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryListResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: Create new repository
      description: Add a new repository for analysis
      operationId: createRepository
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRepositoryRequest"
      responses:
        "201":
          description: Repository created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Repository"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Repository already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/repositories/{id}:
    get:
      summary: Get repository by ID
      description: Retrieve detailed information about a specific repository
      operationId: getRepository
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Repository ID
          schema:
            type: string
      responses:
        "200":
          description: Repository details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Repository"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Repository not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Update repository
      description: Update repository information
      operationId: updateRepository
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Repository ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRepositoryRequest"
      responses:
        "200":
          description: Repository updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Repository"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Repository not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Delete repository
      description: Remove repository from analysis
      operationId: deleteRepository
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Repository ID
          schema:
            type: string
      responses:
        "204":
          description: Repository deleted successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Repository not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/repositories/{id}/stats:
    get:
      summary: Get repository statistics
      description: Retrieve detailed statistics for a repository
      operationId: getRepositoryStats
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Repository ID
          schema:
            type: string
      responses:
        "200":
          description: Repository statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  repositoryId:
                    type: string
                  totalFiles:
                    type: integer
                  totalLines:
                    type: integer
                  languages:
                    type: object
                    additionalProperties:
                      type: integer
                  lastCommitDate:
                    type: string
                    format: date-time
                  codeChunks:
                    type: integer
                  avgComplexity:
                    type: number
                    format: float
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Repository not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/search:
    post:
      summary: Search code chunks across all repositories
      description: Perform text search across all accessible code chunks with optional filters
      operationId: globalSearch
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
      parameters:
        - name: limit
          in: query
          description: Maximum number of results to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of results to skip for pagination
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: language
          in: query
          description: Filter by programming language
          schema:
            type: string
        - name: fileType
          in: query
          description: Filter by file extension
          schema:
            type: string
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResponse"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/repositories/{id}/search:
    post:
      summary: Search within a specific repository
      description: Perform text search within a specific repository's code chunks
      operationId: repositorySearch
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Repository ID
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of results to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of results to skip for pagination
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: language
          in: query
          description: Filter by programming language
          schema:
            type: string
        - name: fileType
          in: query
          description: Filter by file extension
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResponse"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Repository not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/search/quick:
    get:
      summary: Quick search for autocomplete
      description: Lightweight search with limited results for autocomplete functionality
      operationId: quickSearch
      security:
        - BearerAuth: []
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
            minLength: 1
        - name: repositoryId
          in: query
          description: Filter by repository ID
          schema:
            type: string
        - name: language
          in: query
          description: Filter by programming language
          schema:
            type: string
        - name: fileType
          in: query
          description: Filter by file extension
          schema:
            type: string
      responses:
        "200":
          description: Quick search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        filePath:
                          type: string
                        fileName:
                          type: string
                        language:
                          type: string
                        highlight:
                          type: string
                        score:
                          type: number
                          format: float
                  total:
                    type: integer
                  query:
                    type: string
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/search/suggestions:
    get:
      summary: Get search suggestions
      description: Get autocomplete suggestions for search queries
      operationId: getSearchSuggestions
      security:
        - BearerAuth: []
      parameters:
        - name: q
          in: query
          required: true
          description: Partial search query
          schema:
            type: string
            minLength: 1
        - name: repositoryId
          in: query
          description: Filter by repository ID
          schema:
            type: string
      responses:
        "200":
          description: Search suggestions
          content:
            application/json:
              schema:
                type: object
                properties:
                  suggestions:
                    type: array
                    items:
                      type: string
                  query:
                    type: string
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/search/languages:
    get:
      summary: Get available programming languages
      description: Retrieve a list of programming languages available for filtering
      operationId: getLanguages
      security:
        - BearerAuth: []
      parameters:
        - name: repositoryId
          in: query
          description: Filter by repository ID
          schema:
            type: string
      responses:
        "200":
          description: Available programming languages
          content:
            application/json:
              schema:
                type: object
                properties:
                  languages:
                    type: array
                    items:
                      type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/search/stats:
    get:
      summary: Get search statistics
      description: Retrieve statistics about the searchable code chunks
      operationId: getSearchStats
      security:
        - BearerAuth: []
      parameters:
        - name: repositoryId
          in: query
          description: Filter by repository ID
          schema:
            type: string
      responses:
        "200":
          description: Search statistics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchStats"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/search/recent:
    get:
      summary: Get recently added code chunks
      description: Retrieve the most recently added code chunks
      operationId: getRecentChunks
      security:
        - BearerAuth: []
      parameters:
        - name: repositoryId
          in: query
          description: Filter by repository ID
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of chunks to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        "200":
          description: Recent code chunks
          content:
            application/json:
              schema:
                type: object
                properties:
                  chunks:
                    type: array
                    items:
                      $ref: "#/components/schemas/CodeChunk"
                  total:
                    type: integer
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/search/vector:
    post:
      summary: Vector-based semantic search
      description: Perform semantic similarity search using vector embeddings
      operationId: vectorSearch
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VectorSearchRequest"
      responses:
        "200":
          description: Vector search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/SimilarityResult"
                  total:
                    type: integer
                    minimum: 0
                  hasMore:
                    type: boolean
                  query:
                    type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/search/hybrid:
    post:
      summary: Hybrid search combining text and vector similarity
      description: Perform search using both text matching and semantic similarity with configurable weights
      operationId: hybridSearch
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HybridSearchRequest"
      responses:
        "200":
          description: Hybrid search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/SimilarityResult"
                  total:
                    type: integer
                    minimum: 0
                  hasMore:
                    type: boolean
                  query:
                    type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/search/similar/{chunkId}:
    get:
      summary: Find similar code chunks
      description: Find code chunks similar to the specified chunk using vector similarity
      operationId: findSimilarChunks
      security:
        - BearerAuth: []
      parameters:
        - name: chunkId
          in: path
          required: true
          description: ID of the code chunk to find similar chunks for
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of similar chunks to return
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
        - name: repositoryId
          in: query
          description: Optional repository ID filter
          schema:
            type: string
      responses:
        "200":
          description: Similar chunks found
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/SimilarityResult"
                  sourceChunk:
                    $ref: "#/components/schemas/CodeChunk"
                  total:
                    type: integer
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Chunk not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/repositories/{id}/embed:
    post:
      summary: Trigger embedding processing for repository
      description: Start or restart the embedding generation process for all code chunks in the repository
      operationId: triggerRepositoryEmbedding
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Repository ID
          schema:
            type: string
      responses:
        "202":
          description: Embedding processing started
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Embedding processing started"
                  repositoryId:
                    type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Repository not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/repositories/{id}/embedding-status:
    get:
      summary: Get repository embedding status
      description: Check the current status and progress of embedding processing for a repository
      operationId: getRepositoryEmbeddingStatus
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Repository ID
          schema:
            type: string
      responses:
        "200":
          description: Embedding status retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmbeddingStatusResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Repository not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/repositories/{id}/import:
    post:
      summary: Trigger repository import
      description: Manually trigger repository import for stuck or pending repositories
      operationId: triggerRepositoryImport
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Repository ID
          schema:
            type: string
      responses:
        "202":
          description: Import triggered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Repository import triggered"
                  repositoryId:
                    type: string
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Repository not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Invalid status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/embedding/pipeline-stats:
    get:
      summary: Get embedding pipeline statistics
      description: Retrieve counts of pending, processing, completed, and failed embedding jobs.
      operationId: getEmbeddingPipelineStats
      responses:
        "200":
          description: Embedding pipeline statistics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PipelineStats"
