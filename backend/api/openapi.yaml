openapi: 3.1.0
info:
  title: GitHub Repository Analyzer API
  description: AI-powered code analysis platform for GitHub repositories
  version: 1.0.0
  contact:
    name: API Support
    email: support@github-analyzer.com

servers:
  - url: http://localhost:8080
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
        message:
          type: string

    User:
      type: object
      required:
        - id
        - email
        - name
        - createdAt
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        createdAt:
          type: string
          format: date-time


    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    AuthResponse:
      type: object
      required:
        - token
        - user
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'

    HealthCheck:
      type: object
      required:
        - status
        - services
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        services:
          type: object
          properties:
            mongodb:
              type: string
              enum: [connected, disconnected]
            qdrant:
              type: string
              enum: [connected, disconnected]
        timestamp:
          type: string
          format: date-time

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Check the health of all services
      operationId: getHealth
      responses:
        '200':
          description: Service health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/health:
    get:
      summary: API health check endpoint
      description: Check the health of API and dependencies
      operationId: getApiHealth
      responses:
        '200':
          description: API health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      summary: Login user
      description: Authenticate user and return JWT token
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/me:
    get:
      summary: Get current user
      description: Get current user information from JWT token
      operationId: getCurrentUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'