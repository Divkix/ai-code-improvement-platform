# AI Code Improvement Platform CI/CD Pipeline
# Comprehensive workflow for testing, building, and deploying backend and frontend
name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  # Backend testing and building
  backend-test:
    name: Backend Tests & Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache-dependency-path: backend/go.sum

      - name: Verify dependencies
        run: go mod verify

      - name: Generate code from OpenAPI spec
        run: go generate ./internal/generated/...

      - name: Build binary
        run: go build -v -o bin/server cmd/server/main.go

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage.html

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: ./backend
          args: --timeout=5m

  # Frontend testing and building
  frontend-test:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Generate API types from OpenAPI spec
        run: bun run generate-api

      - name: Type checking
        run: bun run check

      - name: Linting and formatting
        run: bun run lint

      - name: Build frontend
        run: bun run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

  # Docker build and test
  docker-test:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          tags: acip-backend:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          tags: acip-frontend:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker Compose stack
        run: |
          # Create minimal test environment
          echo "JWT_SECRET=test-secret-for-ci" > .env.test
          echo "MONGODB_URI=mongodb://mongodb:27017/acip_test" >> .env.test
          echo "QDRANT_URL=http://qdrant:6334" >> .env.test
          echo "EMBEDDING_BASE_URL=https://api.openai.com/v1" >> .env.test
          echo "EMBEDDING_MODEL=text-embedding-3-small" >> .env.test
          echo "EMBEDDING_API_KEY=test-key" >> .env.test
          echo "LLM_BASE_URL=https://api.openai.com/v1" >> .env.test
          echo "LLM_MODEL=gpt-4o-mini" >> .env.test
          echo "LLM_API_KEY=test-key" >> .env.test
          
          # Test that containers start and are healthy
          docker compose -f docker-compose.yml --env-file .env.test up -d --wait --timeout 120
          
          # Basic health checks
          timeout 30 bash -c 'until curl -f http://localhost:8080/health 2>/dev/null; do sleep 1; done' || true
          timeout 30 bash -c 'until curl -f http://localhost:3000 2>/dev/null; do sleep 1; done' || true
          
          # Show logs for debugging
          docker compose logs
          
          # Cleanup
          docker compose down --volumes

  # Build and push Docker images to GHCR
  docker-publish:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [docker-test]
    if: github.event_name != 'pull_request'
    
    strategy:
      matrix:
        include:
          - component: backend
            context: ./backend
            dockerfile: ./backend/Dockerfile
          - component: frontend
            context: ./frontend
            dockerfile: ./frontend/Dockerfile

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=ACIP ${{ matrix.component }}
            org.opencontainers.image.description=AI Code Improvement Platform ${{ matrix.component }}
            org.opencontainers.image.vendor=divkix
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.component }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  # Integration test with published images
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-publish]
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create test environment with published images
        run: |
          # Create docker-compose override for published images
          cat > docker-compose.test.yml << EOF
          services:
            frontend:
              image: ${{ env.REGISTRY }}/${{ github.repository }}/frontend:${{ github.sha }}
            backend:
              image: ${{ env.REGISTRY }}/${{ github.repository }}/backend:${{ github.sha }}
          EOF

          # Create test environment
          echo "JWT_SECRET=test-secret-for-integration" > .env.test
          echo "MONGODB_URI=mongodb://mongodb:27017/acip_integration" >> .env.test
          echo "QDRANT_URL=http://qdrant:6334" >> .env.test
          echo "EMBEDDING_BASE_URL=https://api.openai.com/v1" >> .env.test
          echo "EMBEDDING_MODEL=text-embedding-3-small" >> .env.test
          echo "EMBEDDING_API_KEY=test-key" >> .env.test
          echo "LLM_BASE_URL=https://api.openai.com/v1" >> .env.test
          echo "LLM_MODEL=gpt-4o-mini" >> .env.test
          echo "LLM_API_KEY=test-key" >> .env.test

      - name: Test published Docker images
        run: |
          # Start services with published images
          docker compose -f docker-compose.yml -f docker-compose.test.yml --env-file .env.test up -d --wait --timeout 180
          
          # Run basic integration tests
          timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
          
          echo "âœ… Integration tests passed!"
          
          # Cleanup
          docker compose -f docker-compose.yml -f docker-compose.test.yml down --volumes